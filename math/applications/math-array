#!/usr/bin/python

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2017 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

__author__ = 'v.vlaskine'

import argparse
import numpy as np
import signal
import sys

description = """

a trivial numpy convenience wrapper: read a stream of multidimensional arrays as binary on stdin, perform an operation, output as contiguous arrays to stdout

operations    
    transpose
        transpose a stream of arrays (simply performs numpy.transpose on each record)

"""

epilog = """
examples
    todo
"""

def die( m ): print >> sys.stderr, "math-array:", m; sys.exit( 1 )

if __name__ == '__main__':
    def handle_signal( s, f ): print >> sys.stderr, "tensor-cat: broken pipe, exit"; sys.exit( 0 )
    signal.signal( signal.SIGPIPE, handle_signal ) 
    parser = argparse.ArgumentParser( description = description, epilog = epilog, formatter_class = argparse.RawTextHelpFormatter )
    parser.add_argument( 'operation', nargs = 1, choices = [ "transpose" ], help = 'operation: %(choices)s' )
    parser.add_argument( '--shape', type = str, help = 'comma-separated input array shape, e.g. 4,2,5' )
    parser.add_argument( '--footer-size', '--footer', type = int, default = 0, help = 'if a footer of given size in bytes is present, pass it to stdout with output tensor prepended' )
    parser.add_argument( '--header-size', '--header', type = int, default = 0, help = 'if a header of given size in bytes is present, pass it to stdout with output tensor appended' )
    parser.add_argument( '--to-axes', '--to', type = str, help = 'comma-separated output array axis, e.g. 3,1,2' )
    parser.add_argument( '--type', type = str, default = 'f', choices = ( 'b', 'ub', 'i', 'ui', 'w', 'uw', 'l', 'ul', 'f', 'd' ), help = 'array element type: %(choices)s; default: %(default)s' )
    args = parser.parse_args()
    types = { 'b': np.int8, 'ub': np.uint8, 'w': np.int16, 'uw': np.uint16, 'i': np.int32, 'ui': np.uint32, 'l': np.int64, 'ul': np.uint64, 'f': np.float32, 'd': np.float64 };
    operations = { "transpose": np.transpose };
    if args.shape is None: die( "please specify --shape" )
    ntype = types[ args.type ]
    shape = eval( '(' + args.shape + ')' )
    size = np.prod( shape );
    operation = operations[ args.operation[0] ]
    if args.operation[0] == "transpose":
        if args.to_axes is None: die( "please specify --to-axes" )
        to_axes = eval( '(' + args.to_axes + ')' )
    while True:
        header = np.fromfile( sys.stdin, np.uint8, args.header_size )
        if not args.header_size is None and ( header is None or len( header ) < args.header_size ): break
        data = np.fromfile( sys.stdin, ntype, size )
        if data is None or len( data ) == 0: break
        if len( data ) < size: die( "expected " + str( size ) + " values; got: " + str( len( data ) ) )
        footer = np.fromfile( sys.stdin, np.uint8, args.footer_size )
        if not args.footer_size is None and ( footer is None or len( footer ) < args.footer_size ): die( "expected " + str( args.footer_size ) + " bytes in footer; got: " + "0" if footer is None else str( len( footer ) ) )
        header.tofile( sys.stdout )
        operation( np.reshape( data, shape ), to_axes ).tofile( sys.stdout )
        footer.tofile( sys.stdout )
