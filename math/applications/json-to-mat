#!/usr/bin/python

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2017 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import argparse
import json
import numpy
import scipy.io

description="""
convert from json to matlab .mat format
"""

epilog="""
examples:
  cat data.json | {script_name} > data.mat
  
""".format( script_name=sys.argv[0].split('/')[-1] )

parser=argparse.ArgumentParser(description=description,epilog=epilog)
parser.add_argument( "--force-to-float", action="store_true", help="save integer values as float" )

args=parser.parse_args()


def message( msg, data=() ):
    msg = "json-to-mat: %s" % msg
    print >> sys.stderr, msg % data


def convert(input):
    if isinstance(input, dict):
        return {convert(key): convert(value) for key, value in input.iteritems()}
    elif isinstance(input, list):
        ls=[convert(element) for element in input]
        if len(input)>1 and isinstance(input[0],dict):
            dt=numpy.dtype([(k.encode('utf-8'),'O') for k in input[0].keys()])
            #build ndarray with type input[0] keys
            nar=numpy.ndarray(shape=(1,len(input)),dtype=dt)
            ix=0
            while ix<len(input):
                nar[0,ix]=tuple(convert(input[ix].values()))
                ix+=1
            return nar
        return ls
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    elif isinstance(input,int):
        return ( float( input ) if args.force_to_float else input )
    else:
        return input

mat_data=json.load(sys.stdin)
mat_data=convert(mat_data)
try:
    scipy.io.savemat( sys.stdout, mat_data )
except( IOError ):
    message( "output must be redirected to a file" )
