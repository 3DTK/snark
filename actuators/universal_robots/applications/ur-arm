#!/bin/bash

name=$( basename $0 )

source $( which comma-application-util )

readonly default_timeout=10
readonly default_acceleration=1
readonly default_time=1
readonly number_of_joints=6
function replicate { local what="$1"; local -i n=$2; local separator=,; printf "$what"; printf "${separator}${what}%.0s" $( seq -s' ' 2 $n ); }
readonly zeros=$( replicate 0 $number_of_joints )

function operation_description
{
    cat <<EOF
on; turn the arm on and prepare it for initialisation
off; turn the arm off
init; initialise the arm
estop; emergency stop
free; release the arm so it can be moved manually
run; restore normal operation after estop or free
stop; stop currently executed motion
EOF
}


function option_description
{
    cat <<EOF
--timeout=[<timeout>]; timeout period in seconds for operation 'on', default: $default_timeout seconds
--config=[<config>]; arm config file (run '$name -h -v' to see a sample)
--prefix=[<prefix>]; the entry in the config file under which the script locates relevant info
EOF
}

function usage
{
    cat >&2 <<EOF

    $name provides a suite of operations for managing the robotic arm

usage: 
    $name <operation> [options]

operations:
$( operation_description | sed 's/^/    /g' )

options:
$( option_description | sed 's/^/    /g' )

to see further details use: 
    $name -h -v

EOF

    if [[ "$1" == "verbose" ]]; then
    cat >&2 <<EOF
details of operations:
    on:
        turn the arm on, release the brakes and prepare for initialisation
    off:
        turn the arm off
    init:
        initialise the arm by slowly turning each joint one by one until their status changes from initialising to running
        control arm's movement via the keyboard: ' ' change direction, '+'/'-' increase/decrease speed
    estop:
        emergency stop (subsequent move commands are ignored)
        to return to normal operation use 'run' command
    free:
        release the arm for manual operation (subsequent move commmands are ignored)
    run:
        restore normal operation after emergency stop or free
    stop:
        stop currently executed motion without entering emergency stop mode (subsequent move commands are executed)
        this command only works when the arm is in running mode (it does not work during init)

sample config file (with prefix=ur5):

"ur5":
{
    {
        "status":
        {
            "address": "robot.arm",
            "port": "30003",
            "publisher":
            {
                "address": "robot.nuvo",
                "port": "14000"
            }
        },
        "command":
        {
            "address": "robot.arm",
            "port": "30002"
        },
        "init":
        {
            "speed": 0.025,
            "acceleration": 0.1,
            "time": 15
        }
    }
}

EOF
    fi
    exit
}

function get_mode { nc $publisher_address $publisher_port | ur-arm-status --fields=mode | head -1; }
function get_joint_modes { nc $publisher_address $publisher_port | ur-arm-status --fields=arm/modes | head -1; }

function arm_off { echo 'power off' | nc "$command_address" "$command_port"; }
function arm_free { echo 'set robotmode freedrive' | nc "$command_address" "$command_port"; }
function arm_emergency_stop { echo "stopj([$zeros])" | nc "$command_address" "$command_port"; }
function arm_stop { echo "stopj($default_acceleration)" | nc "$command_address" "$command_port"; }
function arm_run { echo "set robotmode run" | nc "$command_address" "$command_port"; }

function wait_for_mode
{
    local timeout=${options_timeout:-$default_timeout}
    if (( $( echo "$timeout <= 0" | bc -l ) )); then echo "$name: $FUNCNAME: expected positive timeout, got $timeout" >&2; exit 1; fi
    local expected_mode="$1"
    local expected_joint_modes="$2"
    while [[ "$( get_mode )" != "$expected_mode" || "$( get_joint_modes )" != "$expected_joint_modes" ]]; do
        sleep 0.1
        if (( $( echo "$SECONDS > $timeout" | bc -l ) )); then echo "$name: $FUNCNAME: timed out waiting for mode $expected_mode and joint modes $expected_joint_modes" >&2; exit 1; fi
    done
}

function arm_on
{
    local mode_no_power=$( ur-arm-status --mode-from-name no-power )
    local mode_stop=$( ur-arm-status --mode-from-name security-stopped )
    local mode_init=$( ur-arm-status --mode-from-name initialising )
    local joint_mode_idle=$( ur-arm-status --joint-mode-from-name idle )
    local joint_mode_init=$( ur-arm-status --joint-mode-from-name initialisation )
    if [[ -z "$mode_no_power" ]]; then echo "$name: $FUNCNAME: no-power mode undefined, check if 'ur-arm-status --mode-from-name no-power' works" >&2; exit 1; fi
    if [[ -z "$mode_stop" ]]; then echo "$name: $FUNCNAME: stop mode undefined, check if 'ur-arm-status --mode-from-name security-stopped' works" >&2; exit 1; fi
    if [[ -z "$mode_init" ]]; then echo "$name: $FUNCNAME: init mode undefined, check if 'ur-arm-status --mode-from-name initialisation' works" >&2; exit 1; fi
    if [[ -z "$joint_mode_idle" ]]; then echo "$name: $FUNCNAME: joint idle mode undefined, check if 'ur-arm-status --joint-mode-from-name idle' works" >&2; exit 1; fi
    if [[ -z "$joint_mode_init" ]]; then echo "$name: $FUNCNAME: joint initialisation mode undefined, check if 'ur-arm-status --joint-mode-from-name initialisation' works" >&2; exit 1; fi
    local mode="$( get_mode )"
    if [[ -z "$mode" ]]; then echo "$name: $FUNCNAME: failed to get mode, check if status daemon is publishing on port $publisher_port" >&2; exit 1; fi
    if [[ "$mode" != "$mode_no_power" ]]; then echo "$name: $FUNCNAME: expected the arm to be in mode $mode_no_power (no-power), got mode $mode" >&2; exit 1; fi
    if [[ $( get_joint_modes | tr ',' '\n' | wc -l ) != $number_of_joints ]]; then echo "$name: $FUNCNAME: failed to get $number_of_joints joint modes" >&2; exit 1; fi 

    echo "turning the arm on at $( date +%X.%N ) ..."
    echo "power on" | nc "$command_address" "$command_port"
    wait_for_mode "$mode_init" "$( replicate $joint_mode_idle $number_of_joints )"
    arm_emergency_stop
    wait_for_mode "$mode_stop" "$( replicate $joint_mode_idle $number_of_joints )"
    arm_run
    wait_for_mode "$mode_init" "$( replicate $joint_mode_init $number_of_joints )"
    echo "the arm is on and ready for initialisation at $( date +%X.%N )"
}

function initialise_joint
{
    IFS=,
    local joint="$1"
    local key
    local status=0
    local -a speeds=( $zeros )
    speeds[joint]=$speed
    local update_movement=1
    SECONDS=0
    while [[ "$( get_joint_modes | cut -d, -f$(( joint+1 )) )" != "$joint_mode_run" ]]; do
        if (( update_movement )); then echo "speedj_init([${speeds[*]}],$acceleration,$time)" | nc "$command_address" "$command_port" >/dev/null; fi
        read -s -t 0.25 -n 1 key
        case "$key" in
            ' ') speeds[joint]=$( echo "-1*(${speeds[$joint]})" | bc -l ); update_movement=1 ;;
            '+') speeds[joint]=$( echo "1.25*(${speeds[$joint]})" | bc -l ); update_movement=1 ;;
            '-') speeds[joint]=$( echo "0.75*(${speeds[$joint]})" | bc -l ); update_movement=1 ;;
            *) update_movement=0
        esac
        if (( $( echo "$SECONDS > $time" | bc -l ) )); then status=1; break; fi
    done
    echo "speedj_init([$zeros],$default_acceleration,$default_time)" | nc "$command_address" "$command_port" >/dev/null
    return $status
}

function arm_init 
{
    local -r speed=( $( name-value-get --from json $prefix/init/speed < $config ) )
    local -r acceleration=( $( name-value-get --from json $prefix/init/acceleration < $config ) )
    local -r time=( $( name-value-get --from json $prefix/init/time < $config ) )
    local joint_mode_init=$( ur-arm-status --joint-mode-from-name initialisation )
    local joint_mode_run=$( ur-arm-status --joint-mode-from-name running )
    if [[ -z "$speed" ]]; then echo "$name: $FUNCNAME: $prefix/init/speed is not found in $config" >&2; exit 1; fi
    if [[ -z "$acceleration" ]]; then echo "$name: $FUNCNAME: $prefix/init/acceleration is not found in $config " >&2; exit 1; fi
    if [[ -z "$time" ]]; then echo "$name: $FUNCNAME: $prefix/init/time is not found in $config" >&2; exit 1; fi
    if (( $( echo "$time <= 0" | bc -l ) )); then echo "$name: $FUNCNAME: expected positive time, got $time" >&2; exit 1; fi
    if [[ -z "$joint_mode_init" ]]; then echo "$name: $FUNCNAME: initialisation mode undefined, check if 'ur-arm-status --joint-mode-from-name initialisation' works" >&2; exit 1; fi
    if [[ -z "$joint_mode_run" ]]; then echo "$name: $FUNCNAME: running mode undefined, check if 'ur-arm-status --joint-mode-from-name running' works" >&2; exit 1; fi    
    local -a modes=( $( get_joint_modes | tr ',' ' ' ) )
    if [[ -z "${modes[@]}" ]]; then echo "$name: $FUNCNAME: failed to get joint modes, check if status daemon is publishing on port $publisher_port" >&2; exit 1; fi
    if [[ ${#modes[@]} != $number_of_joints ]]; then echo "$name: $FUNCNAME: failed to get $number_of_joints joint modes" >&2; exit 1; fi

    trap 'arm_emergency_stop; stty echo echok; exit 1' SIGINT SIGTERM

    echo "initialising the arm at $( date +%X.%N )..."
    for (( joint = number_of_joints - 1; joint >= 0; joint-- )); do
        if [[ "${modes[joint]}" == "$joint_mode_run" ]]; then 
            echo "joint $joint already initialised"
        else
            if [[ "${modes[joint]}" == "$joint_mode_init" ]]; then echo -n "initialising joint $joint... "; initialise_joint $joint && echo " succeeded" || echo " failed";
            else echo "$name: $FUNCNAME: expected joint $joint to be in mode $joint_mode_init (init), got ${modes[joint]}" >&2; exit 1; fi
        fi
    done
    echo "the arm is initialised and ready to be used at $( date +%X.%N )"
}


if (( $( comma_options_has --help "$@" ) || $( comma_options_has -h "$@" ) )) ; then
    if (( $( comma_options_has --verbose "$@" ) || $( comma_options_has -v "$@" ) )) ; then
        usage verbose
    else
        usage
    fi
fi
allowed_operations=$( echo $( operation_description | cut -d";" -f1 | tr '\n' ' ') )
operation=$1
comma_path_value_to_var --prefix=options --no-quotes < <( option_description | comma-options-to-name-value "$@" | grep -v '^"' )

if (( $( comma_options_has $operation $allowed_operations ) )); then 
    shift
else
    if [[ -z "$operation" ]]; then usage; fi
    echo -e "$name: expected operation (e.g. ${allowed_operations// /, }), got \"$operation\"" >&2
    exit 1
fi

config=${options_config}
prefix=${options_prefix}

if [[ -z "$config" ]]; then echo "$name: config file is not given" >&2; exit 1; fi
if [[ ! -f "$config" ]]; then echo "$name: config file not found" >&2; exit 1; fi
if [[ -z "$prefix" ]]; then echo "$name: prefix is not given" >&2; exit 1; fi

publisher_address="$( name-value-get --from json $prefix/status/publisher/address < $config )"
publisher_port="$( name-value-get --from json $prefix/status/publisher/port < $config )"
command_address="$( name-value-get --from json $prefix/command/address < $config )"
command_port="$( name-value-get --from json $prefix/command/port < $config )"

if [[ -z "$publisher_address" ]]; then echo "$name: $prefix/status/publisher/address is not found in $config" >&2; exit 1; fi
if [[ -z "$publisher_port" ]]; then echo "$name: $prefix/status/publisher/port is not found in $config" >&2; exit 1; fi
if [[ -z "$command_address" ]]; then echo "$name: $prefix/command/address is not found in $config" >&2; exit 1; fi
if [[ -z "$command_port" ]]; then echo "$name: $prefix/command/port is not found in $config" >&2; exit 1; fi

case "$operation" in
"on")
    arm_on
    ;;
"off")
    arm_off
    ;;
"init")
    arm_init
    ;;
"estop")
    arm_emergency_stop
    ;;
"free")
    arm_free
    ;;
"run")
    arm_run
    ;;
"stop")
    arm_stop
    ;;
esac
