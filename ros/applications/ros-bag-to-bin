#!/usr/bin/python

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2016 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rosbag
import sys
import struct
import argparse

help_description='extract topic data from rosbag in binary format'
help_example="""
***** NOTE: This application is deprecated. Please use ros-to-csv. *****

example
    ros-bag-to-bin "pointscloud.bag" "/camera/rgb/points" 32 | csv-from-bin 4i,4ub,3i | head
    ros-bag-to-bin "pointscloud.bag" "/camera/rgb/points" 32 --timestamp --block | view-points --binary t,ui,4i,4ub,3i --fields t,block,x,y,z,,r,g,b --point-size 3
hint
    get list of topic:
        rostopic list -b <file> 
    get info about a topic:
        rostopic echo <topic> -b <file> | less -S
        rostopic echo /camera/rgb/points -b pointscloud.bag | head -32
"""
parser=argparse.ArgumentParser(description=help_description,epilog=help_example,formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('file',help='input bag file')
parser.add_argument('topic',help='topic in bag file to be extracted')
parser.add_argument('size',help='size of each record',type=int)
parser.add_argument('--timestamp',help='prepend timestamp to each record',action='store_true')
parser.add_argument('--block',help='add block field as binary unsigned int',action='store_true')
args=parser.parse_args()

bag=rosbag.Bag(sys.argv[1])
block=0
for topic, msg, t in bag.read_messages(topics=[sys.argv[2]]):
    if(args.timestamp): ts=struct.pack('q',t.secs*1000000+t.nsecs/1000)
    block_buf=struct.pack('I',block)
    for i in range(0,len(msg.data)/args.size):
        if(args.timestamp):
            sys.stdout.write(ts)
        if(args.block):
            sys.stdout.write(block_buf)
        sys.stdout.write(msg.data[i*args.size:(i+1)*args.size])
    block+=1
bag.close()
