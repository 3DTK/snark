#!/usr/bin/python

import argparse, datetime, numpy, sys, re
from signal import signal, SIGPIPE, SIG_DFL
import rosbag, rospy, rostopic
import comma.csv
import snark.ros.convert

try:
    import rospy_message_converter
except ImportError:
    msg = """
cannot import rospy_message_converter module; usually you can install it as
    sudo apt-get install ros-kinetic-rospy-message-converter
(use your ROS distro name in place of kinetic). If the module is not available
in your package manager, build and install the module manually.
"""
    raise ImportError(msg)

help_description="output ROS messages on a given topic (todo) or ROS bag files of arbitrary content as csv streams"
help_examples="""
examples
    rosbag to csv
        ros-to-csv --bag "input.bag"
        ros-to-csv --bag="input.bag" --topic "/mavros/global_position/raw/fix"
        ros-to-csv --bag="input.bag" --topic "/mavros/global_position/raw/fix" --output-format
        ros-to-csv --bag="input.bag" --topic "/mavros/global_position/raw/fix" --output-fields
        ros-to-csv --bag="input.bag" --topic "/mavros/global_position/raw/fix" --binary=guess | csv-from-bin ui,t,s[3],b,uw,12d,ub
        ros-to-csv --bag="input.bag" --topic "/mavros/global_position/raw/fix" --binary=ui,t,s[5],b,uw,12d,ub | csv-from-bin ui,t,s[5],b,uw,12d,ub
        ros-to-csv --bag="input.bag" --set-length "header/frame_id=15;data/string=10"

general ROS bag hints
    get list of topics inside a bag:
        rostopic list -b <bag>
    get info about a topic:
        rostopic echo <topic> -b <file> | less -S
        rostopic echo /mavros/global_position/global -b input.bag | head -n 32
"""

def remove_argparse_options( parser, options ):
    """
    argparse does not provide a standard way to remove or override options
    this function handles it manually
"""
    for option in options:
        for action in parser._actions:
            for option_string in vars(action)['option_strings']:
                if option_string == option:
                    parser._handle_conflict_resolve( None, [(option, action)] )
                    break

class set_length_action( argparse.Action ):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None: raise ValueError("nargs not allowed")
        super( set_length_action, self ).__init__( option_strings, dest, **kwargs )
    def __call__( self, parser, namespace, values, option_string=None ):
        di = {}
        for c in values.split( ';' ):
            av = c.split( '=' )
            if len(av) != 2: raise RuntimeError( "arguments to --set-length shall take the form <path>=<length>" )
            try: di[ av[0] ] = int( av[1] )
            except: raise ValueError( "length of '%s' shall be an integer, not '%s'" % ( av[0], av[1] ) )
        setattr( namespace, self.dest, di )

class message_handler:
    """create a csv output stream from a sample message, write messages to it"""

    def __init__( self, msg, args ):
        self.record_type, self.record_ctor = snark.ros.convert.ros_message_to_csv_record( msg, args.set_length )
        self.output_format = ''
        if args.output_fields:
            print ','.join( self._output_fields( args.index_output_fields ) )
            sys.exit(0)
        if args.binary:
            if args.binary == "guess":
                self.output_format = self._output_format()
                if args.verbose:
                    print >>sys.stderr, "ros-to-csv: set the binary format to '%s'" % self.output_format
            else:
                user_binary = args.binary.split( ',' )
                fields = args.fields and args.fields.split( ',' ) or self._output_fields() # future-proof; for now --fields do not work
                if len( user_binary ) != len( fields ):
                    if args.fields:
                        print >>sys.stderr, "ros-to-csv: --fields and --binary arguments must have the same length"; sys.exit( 1 )
                    else:
                        print >>sys.stderr, "ros-to-csv: --binary argument must have the same number of fields as the message"; sys.exit( 1 )
                set_length = {}
                regex = r'^s\[(\d+)\]$'
                for k, v in zip( fields, user_binary ):
                    m = re.match( regex, v )
                    if m:
                        set_length[k] = int(m.group(1))
                self.record_type, self.record_ctor = snark.ros.convert.ros_message_to_csv_record( msg, set_length )
                self.output_format = self._output_format()
        if args.output_format:
            if not self.output_format:
                self.output_format = self._output_format()
            print self.output_format
            sys.exit( 0 )
        self.flush = args.flush
        self.binary = not not self.output_format
        # TODO: do support custom format and fields in the output stream
        self.ostream = comma.csv.stream( self.record_type, flush = args.flush, delimiter = args.delimiter, binary = self.binary, fields = args.fields )

    def write( self, msg ):
        self.ostream.write( self.record_ctor( msg ) )
        if self.flush: sys.stdout.flush()

    def _output_format( self ):
        return ','.join( [ comma.csv.format.from_numpy( f ) for f in self.record_type.format.split(',') ] )

    def _output_fields( self, index_output_fields=False ):
        if index_output_fields:
            output_fields = []
            for n in self.record_type.flat_dtype.names:
                shape = self.record_type.flat_dtype[n].shape
                if shape:
                    tmp = numpy.zeros( shape )
                    it = numpy.nditer( tmp, flags=['multi_index'] )
                    while not it.finished:
                        output_fields.append( n + ''.join( [ "[%s]" % i for i in it.multi_index ] ) )
                        it.iternext()
                else:
                    output_fields.append( n )
            return output_fields
        else:
            return self.record_type.fields

class rostopic_subscriber:
    """subscribe to a topic, output messages as csv in callback"""

    def __init__( self, args ):
        self.args = args
        rospy.init_node( 'listener', anonymous = True )
        rospy.Subscriber( args.topic, rostopic.get_topic_class( args.topic )[0], self.callback )
        self.handler = message_handler( rostopic.get_topic_class( args.topic )[0](), self.args )

    def callback( self, msg ): self.handler.write( msg )

def main():
    parser = argparse.ArgumentParser( description=help_description, epilog=help_examples, formatter_class=argparse.RawDescriptionHelpFormatter, conflict_handler='resolve' )
    parser.add_argument( 'topic', nargs = '?', help = 'topic', type = str )
    parser.add_argument( '--bag', '--file', help='input bag file', type=str )
    parser.add_argument( '--flush', help='flush stdout after each message' )
    parser.add_argument( '--index-output-fields', help='output array fields with indices, e.g., output "array[0],array[1],array[2]", not "array"', action='store_true' )
    parser.add_argument( '--output-fields', help='print output fields and exit', action='store_true' )
    parser.add_argument( '--output-format', '--output-types', help='print output format for binary and exit', action='store_true' )
    parser.add_argument( '--set-length', help='set length of listed string fields; by default, take from first input', type=str, action=set_length_action, default={} )
    parser.add_argument( '--topic', help='topic in the bag file to be extracted; can be skipped for single-topic bags', type=str )
    parser.add_argument( '-v', '--verbose', help='chat more', action='store_true' )
    comma.csv.add_options( parser )
    # override to fix the help
    remove_argparse_options( parser, [ '-b', '--binary' ] )
    parser.add_argument( '-b', '--binary', help='produce binary output in the given format; if argument is "guess", figure out format from the message itself', type=str )
    args = parser.parse_args()

    signal( SIGPIPE, SIG_DFL ) # do no want the IOError message trace
    if args.bag is None:
        if args.topic is None: print >> sys.stderr, "ros-to-csv: please specify --topic"; sys.exit( 1 )
        if args.verbose: print >> sys.stderr, "ros-to-csv: listening to topic '%s'..." % args.topic
        subscriber = rostopic_subscriber( args )
        rospy.spin()
    else:
        try:
            with rosbag.Bag( args.bag ) as bag:
                topics = bag.get_type_and_topic_info()[1].keys()
                if not args.topic:
                    if len( topics ) != 1: print >> sys.stderr, "ros-to-csv: bag '%s' contains '%d' topics; please specify --topic explicitly" % ( args.bag, len( topics ) ); sys.exit( 1 )
                    if args.verbose: print >>sys.stderr, "%s: warning: topic not specified, use '%s' as the only topic in the bag" % ( sys.argv[0], topics[0] )
                    args.topic = topics[0]
                else:
                    if not args.topic in topics: print >> sys.stderr, "ros-to-csv: topic '%s' not found in the bag '%s'" % ( args.topic, args.bag ); sys.exit( 1 )
                generator = bag.read_messages( topics=[ args.topic ] )
                for topic, msg, t in generator:
                    try: handler
                    except NameError: handler = message_handler( msg, args )
                    handler.write( msg )
        except IOError as e:
            print >> sys.stderr, "ros-to-csv: failed to open bag file '%s' for reading" % args.bag
            sys.exit( 1 )
    sys.exit(0)

if __name__ == '__main__': main()
