#!/usr/bin/python

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2017 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rospy
import sys
import struct
import argparse
import time
import numpy
import traceback
from sensor_msgs.msg import Image
from snark.imaging import cv_image
import cv2
import rosbag

encoding_map={
    'rgb8': cv2.CV_8UC3, 
    'rgba8': cv2.CV_8UC4,
    "rgb16": cv2.CV_16UC3,
    "rgba16": cv2.CV_16UC4,
    "bgr8": cv2.CV_8UC3,
    "bgra8": cv2.CV_8UC4,
    "bgr16": cv2.CV_16UC3,
    "bgra16": cv2.CV_16UC4,
    "mono8": cv2.CV_8UC1,
    "mono16": cv2.CV_16UC1,
    "8UC1": cv2.CV_8UC1,
    "8UC2": cv2.CV_8UC2,
    "8UC3": cv2.CV_8UC3,
    "8UC4": cv2.CV_8UC4,
    "8SC1": cv2.CV_8SC1,
    "8SC2": cv2.CV_8SC2,
    "8SC3": cv2.CV_8SC3,
    "8SC4": cv2.CV_8SC4,
    "16UC1": cv2.CV_16UC1,
    "16UC2": cv2.CV_16UC2,
    "16UC3": cv2.CV_16UC3,
    "16UC4": cv2.CV_16UC4,
    "16SC1": cv2.CV_16SC1,
    "16SC2": cv2.CV_16SC2,
    "16SC3": cv2.CV_16SC3,
    "16SC4": cv2.CV_16SC4,
    "32SC1": cv2.CV_32SC1,
    "32SC2": cv2.CV_32SC2,
    "32SC3": cv2.CV_32SC3,
    "32SC4": cv2.CV_32SC4,
    "32FC1": cv2.CV_32FC1,
    "32FC2": cv2.CV_32FC2,
    "32FC3": cv2.CV_32FC3,
    "32FC4": cv2.CV_32FC4,
    "64FC1": cv2.CV_64FC1,
    "64FC2": cv2.CV_64FC2,
    "64FC3": cv2.CV_64FC3,
    "64FC4": cv2.CV_64FC4,
    "bayer_rggb8": cv2.CV_8UC4,
    "bayer_bggr8": cv2.CV_8UC4,
    "bayer_gbrg8": cv2.CV_8UC4,
    "bayer_grbg8": cv2.CV_8UC4,
    "bayer_rggb16": cv2.CV_16UC4,
    "bayer_bggr16": cv2.CV_16UC4,
    "bayer_gbrg16": cv2.CV_16UC4,
    "bayer_grbg16": cv2.CV_16UC4
}

def message_to_image(msg):
    global shutdown
    global args
    try:
        header=numpy.zeros((),dtype=cv_image.image.header_dtype)
        t=msg.header.stamp
        header['time']=t.secs*1000000+t.nsecs/1000
        header['rows']=msg.height
        header['cols']=msg.width
        header['type']=encoding_map[msg.encoding]
        header.tofile(sys.stdout)
        #t=msg.header.stamp
        #ts=struct.pack('q',t.secs*1000000+t.nsecs/1000)
        #sys.stdout.write(ts)
        #sys.stdout.write(struct.pack('I',msg.height))
        #sys.stdout.write(struct.pack('I',msg.width))
        #sys.stdout.write(struct.pack('I',encoding_map[msg.encoding]))
        sys.stdout.write(msg.data)
        if args.flush:
            sys.stdout.flush()
        
    except SystemExit:
        shutdown=True
    except:
        shutdown=True
        sys.stderr.write("exception!\n")
        traceback.print_exc()

def parse_args():
    help_description='listen to a ros topic for raw image and write it in cv format to stdout'
    help_example="""
example
  read from published ros topic and output image
    ros-to-image /camera/rgb/image_color | cv-cat "timestamp;view;null"

  read from rosbags and output image
    ros-to-image /camera/rgb/image_color /log/*.bag | cv-cat "timestamp;view;null"

"""
    parser=argparse.ArgumentParser(description=help_description,epilog=help_example,formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('topic',help='topic to listen to')
    parser.add_argument('bags', metavar='BAGFILE', nargs='*', help='read messages from bag files')
    parser.add_argument('--flush',help='flush stdout after each image frame write',action='store_true')
    return parser.parse_args()

def main():
    global args
    global shutdown
    args = parse_args()
    shutdown = False

    if len(args.bags):
        for bagfile in args.bags:
            with rosbag.Bag(bagfile) as bag:
                for topic, msg, t in bag.read_messages(topics=args.topic):
                    if shutdown: exit(0)
                    message_to_image(msg)
    else:
        rospy.init_node('listener',anonymous=True,disable_signals=True)
        subscription = rospy.Subscriber(args.topic, Image, message_to_image)
        while not shutdown:
            time.sleep(0.001)
        rospy.signal_shutdown('shutdown')

if __name__ == '__main__':
    main()
