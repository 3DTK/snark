#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

source $( type -p comma-application-util )
source $( type -p comma-process-util )

declare -rx scriptname=$( basename $0 )
declare -rx default_format=jpg

function option_description
{
    cat <<EOF
--backend-config=<config>; backend config
--robot-config=<config>; robot config
--publish-config=<config>; publish config
--xpath=<xpath>; xpath to backend config
--count=[<count>]; frame count (default: stream)
--format=[<format>]; default=$default_format; encoding format as recognised by cv-cat encode
EOF
}

function usage
{
    cat >&2 <<EOF

    $scriptname: outputs images as base64 encoded strings, one image per line

usage:
    $scriptname --backend-config=<config> --robot-config=<config> --publish-config=<config> --xpath=<xpath> [--count=<count>] [--data-uri]

options:
$( option_description | sed 's/^/    /g' )

EOF
    exit
}

function image_base64_encode
{
    local format=$1
    local count=$2
    for (( i=0; !count || i++ < count; )); do
        IFS=, read t rows cols type < <( head -c 20 | csv-from-bin t,3ui )
        [[ -n "$rows" ]] || return 1
        echo -n "data:image/$format;base64,"; head -c $rows | base64 -w 0; echo
    done
}
export -f image_base64_encode

function run
{
    local address=$1
    local format=$2
    io-cat -u $address | cv-cat --discard "timestamp;encode=$format" | image_base64_encode $format $options_count
}
export -f run

if (( $( comma_options_has --help "$@" ) || $( comma_options_has -h "$@" ) )) ; then
    if (( $( comma_options_has --verbose "$@" ) || $( comma_options_has -v "$@" ) )) ; then
        usage verbose
    else
        usage
    fi
fi

comma_path_value_to_var --prefix=options --export < <( option_description | comma-options-to-name-value "$@" | grep -v '^"' )

xpath=$( name-value-get $options_xpath/xpath < $options_backend_config )
[[ -n "$xpath" ]] || xpath=$options_xpath
address=$( name-value-get $xpath/address < $options_publish_config )
port=$( name-value-get $xpath/port < $options_publish_config )
[[ -n $address ]] || address=$( name-value-get $xpath/address < $options_robot_config )
[[ -n $port ]] || port=$( name-value-get $xpath/port < $options_robot_config )
if [[ -n "$port" ]]; then
    [[ -n "$address" ]] || address="localhost"
    address="tcp:$address:$port"
fi
[[ -z "$address" ]] && { echo "$scriptname: no address configured for '$xpath'" >&2; exit 1; }

format=${options_format:-$DEFAULT_FORMAT}

comma_execute_and_wait "bash -c run $address $format"
