#!/bin/bash

source $( type -p comma-application-util )
source $( type -p comma-process-util )

declare -rx scriptname=$( basename $0 )
declare -rx default_format=jpg

function option_description
{
    cat <<EOF
--backend-config=<config>; backend config
--robot-config=<config>; robot config
--publish-config=<config>; publish config
--xpath=<xpath>; xpath to backend config
--count=[<count>]; frame count (default: stream)
--format=[<format>]; default=$default_format; encoding format as recognised by cv-cat encode
EOF
}

function usage
{
    cat >&2 <<EOF

    $scriptname: outputs images as base64 encoded strings, one image per line

usage:
    $scriptname --backend-config=<config> --robot-config=<config> --publish-config=<config> --xpath=<xpath> [--count=<count>] [--data-uri]

options:
$( option_description | sed 's/^/    /g' )

EOF
    exit
}

function image_base64_encode
{
    local format=$1
    local count=$2
    for (( i=0; !count || i++ < count; )); do
        IFS=, read t rows cols type < <( head -c 20 | csv-from-bin t,3ui )
        [[ -n "$rows" ]] || return 1
        echo -n "data:image/$format;base64,"; head -c $rows | base64 -w 0; echo
    done
}
export -f image_base64_encode

function run
{
    local address=$1
    local format=$2
    io-cat -u $address | cv-cat --discard "timestamp;encode=$format" | image_base64_encode $format $options_count
}
export -f run

if (( $( comma_options_has --help "$@" ) || $( comma_options_has -h "$@" ) )) ; then
    if (( $( comma_options_has --verbose "$@" ) || $( comma_options_has -v "$@" ) )) ; then
        usage verbose
    else
        usage
    fi
fi

comma_path_value_to_var --prefix=options --export < <( option_description | comma-options-to-name-value "$@" | grep -v '^"' )

xpath=$( name-value-get $options_xpath/xpath < $options_backend_config )
[[ -n "$xpath" ]] || xpath=$options_xpath
address=$( name-value-get $xpath/address < $options_publish_config )
port=$( name-value-get $xpath/port < $options_publish_config )
[[ -n $address ]] || address=$( name-value-get $xpath/address < $options_robot_config )
[[ -n $port ]] || port=$( name-value-get $xpath/port < $options_robot_config )
if [[ -n "$port" ]]; then
    [[ -n "$address" ]] || address="localhost"
    address="tcp:$address:$port"
fi
[[ -z "$address" ]] && { echo "$scriptname: no address configured for '$xpath'" >&2; exit 1; }

format=${options_format:-$DEFAULT_FORMAT}

comma_execute_and_wait "bash -c run $address $format"
