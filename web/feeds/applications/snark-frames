#!/bin/bash

scriptname=$( basename $0 )

source $( which comma-application-util )
source $( which comma-trap )

DEFAULT_TIMEOUT=10

function option_description
{
    cat <<EOF
--backend-config=<config>; backend config
--robot-config=<config>; robot config
--publish-config=<config>; publish config
--xpath=<xpath>; xpath to backend config
--count=[<count>]; frame count (default: stream)
--data-uri; output each frame as base64-encoded data uri
EOF
}

function usage
{
    cat >&2 <<EOF

    $scriptname: outputs frame(s)

usage:
    $scriptname --backend-config=<config> --robot-config=<config> --publish-config=<config> --xpath=<xpath> [--count=<count>] [--data-uri]

options:
$( option_description | sed 's/^/    /g' )

to see further details use:
    $scriptname -h -v

EOF

    local mode=$1
    if [[ "$mode" == "verbose" ]]; then
    cat >&2 <<EOF
TODO
EOF
    fi
    exit
}

function read_input
{
    if [[ -n "$address" || -n "$port" ]]; then
        local io_address=$address
        if [[ -n "$port" ]]; then
            [[ -n "$address" ]] || address="localhost"
            io_address="tcp:$address:$port"
        fi
        io-client -u $io_address
    else
        :
    fi
}

function format_output
{
    if (( data_uri )); then
        echo -n "data:$content_type;base64,"
        base64 -w 0
        echo
    else
        cat
    fi
}

function get_sized_frames
{
    local count=$1
    for (( i=0; !count || i++ < count; )); do
        head -c $size | bash -c "$cmd" | { format_output; (( !count || i < count )) || kill $$; }
    done
}

function get_frames
{
    local count=$1
    for (( i=0; !count || i++ < count; )); do
        bash -c "$cmd" | { format_output; (( !count || i < count )) || kill $$; }
    done
}

if (( $( comma_options_has --help "$@" ) || $( comma_options_has -h "$@" ) )) ; then
    if (( $( comma_options_has --verbose "$@" ) || $( comma_options_has -v "$@" ) )) ; then
        usage verbose
    else
        usage
    fi
fi

comma_path_value_to_var --prefix=options < <( option_description | comma-options-to-name-value "$@" | grep -v '^"' )

data_uri=$( comma_options_has --data-uri "$@" )

FROM_FORMAT=""
if [[ ${options_backend_config##*.} == 'json' ]]; then FROM_FORMAT="--from json"; fi
content_type=$( name-value-get $FROM_FORMAT $options_xpath/content-type < $options_backend_config )
xpath=$( name-value-get $FROM_FORMAT $options_xpath/xpath < $options_backend_config )
cmd=$( name-value-get $FROM_FORMAT $options_xpath/command < $options_backend_config )
[[ -z "$content_type" ]] && content_type="text/plain"
[[ -z "$xpath" ]] && xpath=$options_xpath
if [[ -z "$cmd" ]]; then
    echo "$scriptname: requested '$options_xpath' not found in web config" >&2
    exit 1
fi

FROM_FORMAT=""
if [[ ${options_publish_config##*.} == 'json' ]]; then FROM_FORMAT="--from json"; fi
address=$( name-value-get $FROM_FORMAT $xpath/address < $options_publish_config )
port=$( name-value-get $FROM_FORMAT $xpath/port < $options_publish_config )
size=$( name-value-get $FROM_FORMAT $xpath/size < $options_publish_config )

FROM_FORMAT=""
if [[ ${options_robot_config##*.} == 'json' ]]; then FROM_FORMAT="--from json"; fi
if [[ -z $address ]]; then address=$( name-value-get $FROM_FORMAT $xpath/address < $options_robot_config ); fi
if [[ -z $port ]]; then port=$( name-value-get $FROM_FORMAT $xpath/port < $options_robot_config ); fi
if [[ -z $size ]]; then size=$( name-value-get $FROM_FORMAT $xpath/size < $options_robot_config ); fi
if [[ -z $size ]]; then
    binary=$( name-value-get $FROM_FORMAT $xpath/binary < $options_robot_config )
    [[ -n "$binary" ]] && size=$( csv-size $binary )
fi

if [[ -n "$size" && "$size" -gt 0 ]]; then
    if [[ -z "$address" && -z "$port" ]]; then
        echo "$scriptname: got size but no address/port (xpath:$xpath)" >&2
        exit 1
    fi
fi

comma_trap --exit 0

read_input | { (( size )) && get_sized_frames $options_count || get_frames $options_count; } &

wait
