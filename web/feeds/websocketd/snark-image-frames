#!/bin/bash

source $( type -p comma-application-util )

declare -rx scriptname=$( basename $0 )
declare -rx default_config=/usr/local/etc/websocketd/$scriptname.json

function usage
{
    cat >&2 <<EOF

websocketd endpoint: runs $scriptname

usage:
    this is a CGI script run by websocketd upon access of http://<websocketd-host>:<websocketd-port>/$scriptname

required environment variables:
    WEBSOCKETD_CONFIG; default=$default_config; $scriptname config, see $scriptname --config-sample
    QUERY_STRING; the part of URL after the ? character

example:
    WEBSOCKETD_CONFIG=$default_config QUERY_STRING="xpath=camera-name&data_uri=true&count=1" $scriptname

EOF
    exit
}

function config_paths
{
    cat <<EOF
snark-image-frames/config/backend
snark-image-frames/config/robot
snark-image-frames/config/publish
EOF
}

function config_sample { config_paths | sed 's/$/=""/' |  name-value-convert --to json; }

function say() { echo "$scriptname: $@" >&2; }
function bye() { say "$@"; exit 0; }
function die() { say "$@"; exit 1; }

(( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) && usage
(( $( comma_options_has --config-sample $@ ) )) && { config_sample; exit; }

config=${WEBSOCKETD_CONFIG:-$default_config}

[[ -e "$config" ]] || die "error: config file not found: '$config'"

comma_path_value_to_var --prefix=config --export < <( name-value-get snark-image-frames/config < "$config" )

[[ -n "$config_backend" ]] || die "error: snark-image-frames/config/backend missing in config '$config'"
[[ -n "$config_robot" ]] || die "error: snark-image-frames/config/robot missing in config '$config'"
[[ -n "$config_publish" ]] || die "error: snark-image-frames/config/publish missing in config '$config'"

# parse query string
declare -A query_string
for keyvalue in ${QUERY_STRING//&/ }; do
    IFS='=' read key value <<< "$keyvalue"
    query_string[$key]=$value
done

[[ -n "${query_string[xpath]}" ]] || die "error: expected 'xpath' in query string"

args="--backend-config=$config_backend --robot-config=$config_robot --publish-config=$config_publish --xpath=${query_string[xpath]}"
[[ "${query_string[data_uri]}" == true ]] && args+=" --data-uri"
[[ -n "${query_string[count]}" ]] && args+=" --count=${query_string[count]}"

exec snark-image-frames $args 2>/dev/null
