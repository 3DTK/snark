#!/usr/bin/python

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import cv2 as cv
import numpy as np
import argparse
import json
from snark.imaging import cv_image
from comma.io import windows_binary

description = """

threshold image in colour space


usage
    read images from image stream; see cv-cat --help --verbose for image format details
        cat images.bin | image-threshold [<options>] > labels.bin

    read image from file
        cv-cat --file image.jpg | image-threshold [<options>] | cv-cat --output no-header > labels.bin

    read image from file and save results in new file
        cv-cat --file image.jpg | image-threshold [<options>] | cv-cat --output no-header "convert-to=ub;encode=jpg" > results.jpg

"""

parser = argparse.ArgumentParser( description = description )
parser.add_argument( '--config', action="store", help = 'configuration file name' )
parser.add_argument( '--default-config', action="store_true", help = 'output default config and exit' )
args = parser.parse_args()

# set defaults
default_config = dict()
default_config['space'] = "rgb"
default_config['r'] = dict()
default_config['r']['min'] = 0
default_config['r']['max'] = 255
default_config['g'] = dict()
default_config['g']['min'] = 0
default_config['g']['max'] = 255
default_config['b'] = dict()
default_config['b']['min'] = 0
default_config['b']['max'] = 255

if( args.default_config ):
    print json.dumps( default_config )
    exit(0)

config = default_config
if args.config:
    with open( args.config ) as config_file:
        loaded_config = json.load( config_file )
        config.update( loaded_config )

r_min = config['r']['min']
r_max = config['r']['max']
g_min = config['g']['min']
g_max = config['g']['max']
b_min = config['b']['min']
b_max = config['b']['max']

for i in cv_image.iterator( sys.stdin ):
    header = i.header
    header['type'] = cv.CV_8UC1
    mask = np.zeros( ( header['rows'], header['cols'], 1 ), np.uint8 )

    for j in range( header['rows'] ):
        for k in range( header['cols'] ):
            if( i.data[j][k][2] >= r_min and i.data[j][k][2] <= r_max
             and i.data[j][k][1] >= g_min and i.data[j][k][1] <= g_max
             and i.data[j][k][0] >= b_min and i.data[j][k][0] <= b_max ):
                mask[j][k] = 255

    w = cv_image.image( header, mask )
    cv_image.write( w )
