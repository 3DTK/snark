#!/bin/bash

function options_description
{
    cat <<EOF
--config=[<config>]; config file name
--input-fields; show waypoint fields (config is used if provided)
--output-fields; show output fields (config is used if provided)
--output-format; show output format of binary stream (config is used if provided)
--sample-config; output sample config
--steering=[<steering>]; steering type (omni or skid)
EOF
}

function usage
{
    cat <<END

    take waypoints on stdin and output wheel commands based on the position feedback to stdout

options:
$( options_description | sed 's/^/    /g' )

notes:
    - command line options take precedence over config
    - output is binary if both waypoints and feedback are binary

examples:
    cat waypoints.csv | $scriptname --config=config.json > commands.csv
    $scriptname --input-fields --steering=omni
    $scriptname --output-fields --steering=omni
    $scriptname --output-format --steering=omni
    $scriptname --sample-config

END
    if (( ! $verbose )); then echo "for more output: $scriptname -h -v" >&2; return; fi
    cat <<END
example config file:
    
$( sample_config | sed 's/^/    /' )

    mode: waypoint following mode, fixed or dynamic
          fixed: wait until the current waypoint reached, then go to the next waypoint
          dynamic: if a new waypoint received, while the current waypoint is not reached, go to the new waypoint straightaway
    steering: steering type, omni or skid
              omni: wheels can rotate with respect to the body
              skid: wheels are fixed with respect to the body
    proximity: distance for deciding when a waypoint is reached
    past_endpoint: 1 -> besides proximity condition, consider a waypoint as reached if the vehicle has moved past the end line, 0 -> use only proximity condition
        ( the end line is a line which goes through the target waypoint and is perpendicular to the current wayline)
    heading_is_absolute_default: 1 -> interpret heading as the desired global (absolute) heading, 0 -> heading is relative offset wrt the wayline heading
        ( this describes default behaviour when is_absolute is not provided in the input; when is_absolute is given, it takes precedence )
    frequency: control frequency, i.e. the rate at which wheel commands are output when moving towards a waypoint
        ( when the last given waypoint is reached, no output is produced until new waypoints are given )
    reset: 1 -> reset pid integral upon reaching every target waypoint, 0 -> no reset
    pid:
        cross_track: p,i,d[,threshold] values, with optional integral threshold, for cross-track
        heading: the same for heading
    waypoints:
        fields: csv fields of waypoints (required fields: $default_waypoints_fields_skid for skid steering and $default_waypoints_fields_omni for omni steering)
        binary: binary format of waypoints (ascii stream is assumed by default)
    feedback:
        address: generic address for feedback
        fields: csv fields of feedback (required fields: $default_feedback_fields)
        binary: binary format of feedback (ascii stream is assumed by default)

END
}

function sample_config
{
cat <<END
{
    "mode": "fixed",
    "steering": "omni",
    "proximity": "0.15",
    "past_endpoint": 1,
    "heading_is_absolute_default": 0,
    "frequency": "20.0",
    "reset": 0,
    "waypoints":
    {
        "fields": "x,y,heading,is_absolute,speed,id",
        "binary": "3d,b,d,ui"
    },
    "feedback":
    {
        "address": "tcp:localhost:12345",
        "fields": "t,x,y,yaw",
        "binary": "t,3d"
    },
    "pid":
    {
        "cross_track": "0.3,0,0",
        "heading": "0.5,0,0"
    }
}
END
}

function config_fields_mandatory
{
    cat <<END
mode
steering
proximity
past_endpoint
frequency
reset
feedback/address
pid/cross_track
pid/heading
END
}

function is_binary
{
    [[ -z "$waypoints_binary" && -z "$feedback_binary" ]] && return 1
    [[ -n "$waypoints_binary" && -n "$feedback_binary" ]] && return 0
    die "input and feedback streams should be both ascii or both binary"
}

function die { echo "$scriptname: $1" >&2; exit 1; }

function prefix { csv-fields prefix --path $1; }

function set_default_waypoints_fields
{
    local steering=$1
    case "$steering" in
        omni) waypoints_fields=$waypoints_fields_omni ;;
        skid) waypoints_fields=$waypoints_fields_skid ;;
        *) die "steering '$steering' is not recongnised" ;;
    esac
}


scriptname=$( basename $0 )
source $( which comma-application-util ) || { echo "$scriptname: failed to source comma-application-util" >&2; exit 1; }

# default fields (note that default fields for waypoints depend on steering type and need to be set once the steering type is known)
feedback_fields="t,x,y,yaw"
waypoints_fields_omni="x,y,heading"
waypoints_fields_skid="x,y"

feedback_binary=""
waypoints_binary=""

feedback_format="t,d,d,d"

if (( $( comma_options_has --help "$@" ) || $( comma_options_has -h "$@" ) )); then
    (( $( comma_options_has --verbose "$@" ) || $( comma_options_has -v "$@" ) )) && verbose=1 || verbose=0
    usage $verbose
    exit
fi

if (( $( comma_options_has --sample-config "$@" ) )); then sample_config; exit; fi

eval $( options_description | grep '^--config=' | comma-options-to-name-value "$@" | comma_path_value_mangle )
eval $( name-value-convert --from=json < "$config" | comma_path_value_mangle; comma_status_ok ) || die "failed to import config '$config'"
eval $( options_description | comma-options-to-name-value "$@" | comma_path_value_mangle )
if [[ -z "$waypoints_fields" ]]; then
    [[ "$steering" ]] || die "failed to set default waypoints/fields; steering type is required"
    set_default_waypoints_fields $steering
fi

if (( $( comma_options_has --input-fields "$@" ) )); then echo $waypoints_fields; exit; fi

error_fields=$( control-error --output-fields --status )
error_binary=$( control-error --output-format --status )

command_fields=$( control-command --steering=$steering --output-fields )
command_binary=$( control-command --steering=$steering --output-format )

if (( $( comma_options_has --output-fields "$@" ) )); then
    echo $( prefix feedback <<< $feedback_fields ),$error_fields,$( prefix command <<< $command_fields )
    exit
fi
if (( $( comma_options_has --output-format "$@" ) )); then
    echo ${feedback_binary:-$feedback_format},$error_binary,$command_binary
    exit
fi

passed_fields=$( prefix target <<< $waypoints_fields ),$( prefix feedback <<< $feedback_fields ),$error_fields
is_binary && passed_binary=$waypoints_binary,$feedback_binary,$error_binary || passed_binary=
[[ -z $feedback_timeout ]] || feedback_timeout="--feedback-timeout=$feedback_timeout"

config_fields_mandatory | comma_path_assert_defined || die "found undefined config parameters"

echo "$scriptname: starting control pipeline" >&2
control-error \
        --fields=$waypoints_fields \
        --binary=$waypoints_binary \
        "$feedback_address;fields=$feedback_fields;binary=$feedback_binary" \
        --mode=$mode \
        --proximity=$proximity \
        --frequency=$frequency \
        $( (( past_endpoint )) && echo --past-endpoint ) \
        $( (( heading_is_absolute_default )) && echo --heading-is-absolute ) \
        --status \
        --flush \
        --verbose \
    | control-command \
        --fields=$passed_fields \
        --binary=$passed_binary \
        $feedback_timeout \
        --cross-track-pid=$pid_cross_track \
        --heading-pid=$pid_heading \
        --steering=$steering \
         $( (( reset )) && echo --reset ) \
        --flush \
        --verbose
comma_status_ok && status=0 || status=1
echo "$scriptname: control pipeline has ended with status=$status" >&2
exit $status
