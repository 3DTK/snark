#!/bin/bash

function control_output
{
    local prefix=output/commands
    csv-from-bin $command_format | name-value-from-csv $command_fields --line-number --prefix $prefix | csv-quote --unquote --fields ,x --delimiter =
}

function wait_for_control
{
    local dt=0.1
    local -i count=0
    local -i max_count=50
    while ! grep -E ":$port\s" &>/dev/null <( netstat -ltn ); do
        sleep $dt
        (( ++count ))
        if (( count > max_count )); then { echo "$scriptname: timed out waiting for control to launch"; return 1; }; fi
    done
}

scriptname=$( readlink -f $0 )
source $( type -p comma-application-util ) || { echo "$scriptname: failed to source comma-application-util" >&2; exit 1; }

config=data/config.json

port=$( name-value-get waypoints/port < $config )
format=$( name-value-get waypoints/binary < $config )

command_format=$( control-follow-waypoints --output-format --config=$config )
command_fields=$( control-follow-waypoints --output-fields --config=$config )

pid=
{
    control-follow-waypoints --config=$config & pid=$!
    wait_for_control || exit 1
    {
        # feedback trajectory is straight from 2,0 via 1,1 to 0,2 ( see data/feedback.csv )
        # fields are x,y,heading_offset,is_absolute,speed,index ( see data/config.json )
        echo 1,1,0.1,1,11.1,0
        echo 0,2,0.1,1,22.2,1
    } | csv-to-bin $format | socat -u - tcp:localhost:$port
    sleep 4 # give it enough time to reach the second target waypoint ( about 2 seconds ) but do not wait too long ( the feedback stops in 10 seconds )
    kill $pid
} | control_output
comma_status_ok || exit 1

