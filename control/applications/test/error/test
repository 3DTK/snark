#!/bin/bash

function start_feedback
{
    local scriptpid=$1
    local file=$2
    local pre_sleep=$3
    local post_sleep=$4
    local binary=$5
    local port=$6

    local status

    source $( type -p comma-application-util ) || { echo "$FUNCNAME: failed to source comma-application-util" >&2; return 1; }

    {
        echo "$FUNCNAME: pre sleep for $pre_sleep seconds: $( date +%T.%N )" >&2
        sleep $pre_sleep
        echo "$FUNCNAME: pre sleep ended: $( date +%T.%N )" >&2
        cat $file
    } \
        | \
            {
                csv-play
                echo "$FUNCNAME: post sleep for $post_sleep seconds: $( date +%T.%N )" >&2
                sleep $post_sleep
                echo "$FUNCNAME: end of feedback: $( date +%T.%N )" >&2
            } \
        | csv-to-bin $binary --flush \
        | socat -u - tcp-listen:$port
    comma_status_ok && status=0 || status=1
    echo "status/feedback=$status"
}
export -f start_feedback

function start_control
{
    function wait_for_port
    {
        local port=$1
        local -i count=0
        local listen_state=$( io-ls --enum-state | grep ,LISTEN$ | cut -d, -f1 )
        while ! io-ls --fields local/port,state | grep $port,$listen_state &>/dev/null; do
            sleep 0.01
            if (( ++count > 100 )); then { echo "$FUNCNAME: timed out waiting for port $port" >&2; return 1; }; fi
        done
        echo "port $port is ready" >&2
    }

    local scriptpid=$1
    local input=$2
    local feedback_port=$3
    local feedback_fields=$4
    local feedback_binary=$5
    local targets_delay=$6
    local pre_sleep=$7
    local post_sleep=$8
    local fields=$9
    local binary=${10}
    local options=${11}
    local output_fields=${12}
    local output_format=${13}

    local output_csv=output/output.csv
    local start_time="2015-01-01T00:00:00.000000"
    local status

    source $( type -p comma-application-util ) || { echo "$FUNCNAME: failed to source comma-application-util" >&2; return 1; }

    wait_for_port $feedback_port || return 1
    sleep $targets_delay
    {
        echo "$FUNCNAME: pre sleep for $pre_sleep seconds: $( date +%T.%N )" >&2
        sleep $pre_sleep
        echo "$FUNCNAME: pre sleep ended: $( date +%T.%N )" >&2
        echo "$input"
    } \
        | \
            {
                csv-play
                echo "$FUNCNAME: post sleep for $post_sleep seconds: $( date +%T.%N )" >&2
                sleep $post_sleep
                echo "$FUNCNAME: end of input: $( date +%T.%N )" >&2
            } \
        | csv-shuffle --fields t,x,y,heading --output-fields x,y,heading \
        | csv-to-bin $binary --flush \
        | control-error --fields=$fields  --binary=$binary \
            "tcp:localhost:$feedback_port;fields=$feedback_fields;binary=$feedback_binary" \
            $options --verbose \
        | csv-from-bin $output_format --flush \
        | csv-eval --fields $output_fields --format $output_format \
            "time_diff=( feedback_t - datetime64('$start_time') )/timedelta64(1,'s')" --full-xpath --flush \
        | tee $output_csv \
        | name-value-from-csv $output_fields,time_diff --line-number --prefix output \
        | csv-quote --unquote --fields ,x --delimiter =
    comma_status_ok && status=0 || status=1
    echo "status/control=$status" 
    cat $output_csv \
        | csv-paste - line-number \
        | csv-select --fields $output_fields "reached;equals=1" \
        | rev | cut -d, -f1 | rev \
        | name-value-from-csv index --line-number --prefix reached \
        | csv-quote --unquote --fields ,x --delimiter =
    comma_status_ok && status=0 || status=1
    echo "status/reached=$status"
}
export -f start_control

scriptname=$( readlink -f $0 )
scriptpid=$$
source $( type -p comma-application-util ) || { echo "$scriptname: failed to source comma-application-util" >&2; exit 1; }
source $( type -p comma-process-util ) || { echo "$scriptname: failed to source comma-process-util" >&2; exit 1; }

mkdir -p output

feedback_fields=t,x,y,yaw
feedback_binary=t,d,d,d

fields=x,y,heading_offset
binary=d,d,d

output_fields=$( csv-fields prefix --path target <<< $fields ),$( csv-fields prefix --path feedback <<< $feedback_fields ),$( control-error --output-fields )
output_binary=$binary,$feedback_binary,$( control-error --output-format )

script_dir=$( dirname $( readlink -f $scriptname ) )
feedback=$( [[ -f data/feedback.csv ]] && echo data/feedback.csv || echo $script_dir/data/feedback.csv )
options=$( [[ -f data/options ]] && cat data/options || cat $script_dir/data/options )

input=$( cat )
[[ "$input" ]] || { echo "$scriptname: no input" >&2; exit 1; }

targets_delay=$( head -qn1 <( echo "$input" ) $feedback | cut -d, -f1 | paste -sd, | csv-eval --fields a,b --format 2t "dt = (a-b)/timedelta64(1,'s')" | cut -d, -f3 )

feedback_pre_sleep=$( [[ -f data/feedback_pre_sleep ]] && cat data/feedback_pre_sleep || echo 0 )
targets_pre_sleep=$( [[ -f data/targets_pre_sleep ]] && cat data/targets_pre_sleep || echo 0 )
feedback_post_sleep=10
targets_post_sleep=2

echo "targets_delay=$targets_delay"
echo "feedback_pre_sleep=$feedback_pre_sleep"
echo "feedback_post_sleep=$feedback_post_sleep"
echo "targets_pre_sleep=$targets_pre_sleep"
echo "targets_post_sleep=$targets_post_sleep"
echo "options=\"$options\""

feedback_port=$(( 1024 + $RANDOM ))

comma_execute_and_wait \
    "bash -c start_feedback \
        $scriptpid \
        $feedback \
        $feedback_pre_sleep \
        $feedback_post_sleep \
        $feedback_binary \
        $feedback_port" \
    "bash -c start_control \
        $scriptpid \
        \"$input\" \
        $feedback_port \
        $feedback_fields \
        $feedback_binary \
        $targets_delay \
        $targets_pre_sleep \
        $targets_post_sleep \
        $fields \
        $binary \
        \"$options\" \
        $output_fields \
        $output_binary"

echo "status/main=$?"
