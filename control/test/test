#!/bin/bash

prefix=./output/
input=${prefix}objective
feedback=${prefix}feedback
output=${prefix}error

function clean
{
    pkill -P $$
    rm -f $input $feedback $output
    kill -9 $pid $feedback_pid &>/dev/null
    return 0
}
function bye { clean; exit 1; }
trap bye INT TERM HUP
trap clean EXIT

function wait_for_success { local timeout=1; local n=100; local dt=$( bc -l <<< "$timeout/$n" ); for(( i=0; i < n; i++ )); do eval "$1" && return 0 || sleep $dt; done; return 1; }
function find_free_port { local port; for(( i=0; i < 65535; i++ )); do port=$(( RANDOM + RANDOM )) && (( port > 1023 && port < 65536 )) && ! netstat -ln | grep $port &>/dev/null && echo $port && return; done; }
port=$( find_free_port )
if [[ -z "$port" ]]; then echo "failed to find a free tcp port" >&2; exit 1; fi

rm -f $input $feedback $output
mkfifo $input
mkfifo $feedback

tail -f $feedback | socat -u - tcp-listen:$port,reuseaddr,fork & feedback_pid=$!
wait_for_success "netstat -ltn | grep $port &>/dev/null"
tail -f $input | control-error "tcp:localhost:$port;fields=t,x,y,,,,yaw" --proximity=0.1 --precision=5 --verbose > $output & pid=$!

function send_feedback
{
    local x y yaw
    IFS=, read x y yaw <<< $1
    echo 20121011T121314.123456,$x,$y,0,0,0,$yaw > $feedback
}

output_line_count=0
function wait_for_new_output
{
    (( output_line_count++ ))
    wait_for_success "(( $( wc -l < $output ) == $output_line_count ))" && return 0
    echo "failed to get a new line in $output" >&2
    return 1
}

function test_feedback
{
    local lhs=$1
    local values=$2
    send_feedback $values
    wait_for_new_output && echo "$lhs=\"$( tail -n1 $output )\"" || exit 1
}

function send_input { echo $1 > $input; sleep 0.1; }
function go_to { send_input $1; send_feedback $1,0; }
function return_to_origin { go_to 0,0; }

send_input 1,0
test_feedback "to10/xtrack/initial" 0,0,0
test_feedback "to10/xtrack/positive" 0,0.1,0
test_feedback "to10/xtrack/negative" 0,-0.1,0
test_feedback "to10/heading/positive" 0,0,0.1
test_feedback "to10/heading/negative" 0,0,-0.1
send_feedback 1,0,0

send_input 1,1
test_feedback "to11/xtrack/initial" 1,0,1.5707963267948966
test_feedback "to11/xtrack/positive" 0.9,0,1.5707963267948966
test_feedback "to11/xtrack/negative" 1.1,0,1.5707963267948966
test_feedback "to11/heading/positive" 1,0,1.6707963267948966
test_feedback "to11/heading/negative" 1,0,1.4707963267948966
send_feedback 1,1,1.57079632679

send_input 0,1
test_feedback "to01/xtrack/initial" 1,1,3.141592653589793
test_feedback "to01/xtrack/positive" 1,0.9,3.141592653589793
test_feedback "to01/xtrack/negative" 1,1.1,3.141592653589793
test_feedback "to01/heading/positive" 1,1,-3.041592653589793
test_feedback "to01/heading/negative" 1,1,3.041592653589793
send_feedback 0,1,-3.141592653589793

send_input 0,0
test_feedback "to00/xtrack/initial" 0,1,-1.5707963267948966
test_feedback "to00/xtrack/positive" 0.1,1,-1.5707963267948966
test_feedback "to00/xtrack/negative" -0.1,1,-1.5707963267948966
test_feedback "to00/heading/positive" 0,1,-1.4707963267948966
test_feedback "to00/heading/negative" 0,1,-1.6707963267948966
send_feedback 0,0,-1.5707963267948966

send_input 1,0
test_feedback "heading10/zero" 0,0,0
test_feedback "heading10/p1" 0,0,1
test_feedback "heading10/p2" 0,0,2
test_feedback "heading10/p3" 0,0,3
test_feedback "heading10/n1" 0,0,-1
test_feedback "heading10/n2" 0,0,-2
test_feedback "heading10/n3" 0,0,-3
send_feedback 1,0,0

return_to_origin
send_input 0,1
test_feedback "heading01/zero" 0,0,0
test_feedback "heading01/p1" 0,0,1
test_feedback "heading01/p2" 0,0,2
test_feedback "heading01/p3" 0,0,3
test_feedback "heading01/n1" 0,0,-1
test_feedback "heading01/n2" 0,0,-2
test_feedback "heading01/n3" 0,0,-3
send_feedback 0,1,0

return_to_origin
send_input -1,0
test_feedback "headingm10/zero" 0,0,0
test_feedback "headingm10/p1" 0,0,1
test_feedback "headingm10/p2" 0,0,2
test_feedback "headingm10/p3" 0,0,3
test_feedback "headingm10/n1" 0,0,-1
test_feedback "headingm10/n2" 0,0,-2
test_feedback "headingm10/n3" 0,0,-3
send_feedback -1,0,0

return_to_origin
send_input 0,-1
test_feedback "heading0m1/zero" 0,0,0
test_feedback "heading0m1/p1" 0,0,1
test_feedback "heading0m1/p2" 0,0,2
test_feedback "heading0m1/p3" 0,0,3
test_feedback "heading0m1/n1" 0,0,-1
test_feedback "heading0m1/n2" 0,0,-2
test_feedback "heading0m1/n3" 0,0,-3
send_feedback 0,-1,0

go_to 1,1
send_input 3,2
test_feedback "xtrack/zero" -1,0,0.46364760900080609
test_feedback "xtrack/at_start/positive" 0.5,2,0.46364760900080609
test_feedback "xtrack/at_start/negative" 1.5,0,0.46364760900080609
test_feedback "xtrack/forward/positive" 1,2,0.46364760900080609
test_feedback "xtrack/forward/negative" 2,0,0.46364760900080609
send_feedback 3,2,0

go_to 1,1
send_input 3,2
send_feedback 3.1,2.05,0.46364760900080609
wait_for_new_output && reached=0 || reached=1
echo "past_endpoint/reached=\"$reached\""

clean

echo "format/input/x=\"$( control-error "filename" --fields=x --format )\""
echo "format/input/xy=\"$( control-error "filename" --fields=x,y --format )\""
echo "format/input/default=\"$( control-error "filename" --format )\""
echo "format/input/xyspeed=\"$( control-error "filename" --fields=x,y,speed --format )\""
echo "format/output/default=\"$( control-error "filename" --error-format )\""
echo "format/output/with_speed=\"$( control-error "filename" --fields=x,y,speed --error-format )\""
echo "format/output/heading=\"$( control-error "filename" --error-fields=heading --error-format )\""

