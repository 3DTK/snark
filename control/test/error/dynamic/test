#!/bin/bash

prefix=./output/
input=${prefix}objective
feedback=${prefix}feedback
output=${prefix}output
proximity=0.1
mode=dynamic

function clean
{
    pkill -P $$
    rm -f $input $feedback $output
    kill -9 $pid $feedback_pid &>/dev/null
}
trap clean EXIT

rm -f $feedback $input $output
mkfifo $feedback
mkfifo $input

function wait_for_success { local timeout=1; local n=100; local dt=$( bc -l <<< "$timeout/$n" ); for(( i=0; i < n; i++ )); do eval "$1" && return 0 || sleep $dt; done; return 1; }
function find_free_port { local port; for(( i=0; i < 100; i++ )); do port=$(( RANDOM + RANDOM )) && (( port > 1023 && port < 65536 )) && ! netstat -ln | grep $port &>/dev/null && echo $port && return; done; }
port=$( find_free_port )
if [[ -z "$port" ]]; then echo "failed to find a free tcp port" >&2; exit 1; fi

tail -f $feedback | socat -u - tcp-listen:$port,reuseaddr,fork & feedback_pid=$!
wait_for_success "netstat -ltn | grep $port &>/dev/null"
tail -f $input | control-error "tcp:localhost:$port;fields=t,x,y,,,,yaw" --fields=x,y,speed --proximity=$proximity --past-endpoint --mode=$mode --verbose > $output & pid=$!

function send_feedback
{
    local x y yaw
    IFS=, read x y yaw <<< $1
    echo 20121011T121314.123456,$x,$y,0,0,0,$yaw > $feedback
    sleep 0.1
}

output_line_count=0
function wait_for_new_output
{
    (( output_line_count++ ))
    wait_for_success "(( $( wc -l < $output ) == $output_line_count ))" && return 0
    echo "failed to get a new line in $output" >&2
    return 1
}

function test_feedback
{
    local lhs=$1
    local values=$2
    send_feedback $values
    wait_for_new_output || exit 1
    local x y speed feedback_t feedback_x feedback_y dummy_1 dummy_2 dummy_3 feedback_yaw wayline_heading xtrack heading
    IFS=, read x y speed feedback_t feedback_x feedback_y dummy_1 dummy_2 dummy_3 feedback_yaw wayline_heading xtrack heading <<< $( tail -n1 $output )
    echo "$lhs/x=$x"
    echo "$lhs/y=$y"
    echo "$lhs/speed=$speed"
    echo "$lhs/xtrack=$xtrack"
    echo "$lhs/heading=$heading"
}

function send_input { echo $1 > $input; sleep 0.1; }

send_input 1,0,11
test_feedback "from_00_to_10/feedback[0]" 0,0,0
test_feedback "from_00_to_10/feedback[1]" 0.25,0.1,0.01

send_input 1,1,12
test_feedback "from_10_to_11/feedback[0]" 0.5,0,1.1071487177940904
test_feedback "from_10_to_11/feedback[1]" 0.75,0.5,1.1071487177940904
send_feedback 1,1,0.46364760900080609

send_input 0,1,13
test_feedback "from_11_to_01/feedback[0]" 1,1,3.141592653589793
test_feedback "from_11_to_01/feedback[1]" 0.75,1.1,3.141592653589793

send_input 0,0,14
test_feedback "from_01_to_00/feedback[0]" 0.5,1,-2.0344439357957027
test_feedback "from_01_to_00/feedback[1]" 0.25,0.5,-2.0344439357957027
send_feedback 0,0,-2.0344439357957027

clean
