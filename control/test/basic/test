#!/bin/bash

prefix=./output/
feedback=${prefix}feedback
proximity=0.1

function clean
{
    pkill -P $$
    rm -f $feedback
    return 0
}
function bye { clean; exit 1; }
trap bye INT TERM HUP
trap clean EXIT

echo "format/input/x=\"$( control-error "filename" --fields=x --format )\""
echo "format/input/xy=\"$( control-error "filename" --fields=x,y --format )\""
echo "format/input/default=\"$( control-error "filename" --format )\""
echo "format/input/xyspeed=\"$( control-error "filename" --fields=x,y,speed --format )\""
echo "format/output=\"$( control-error "filename" --output-format )\""

function extract
{
    local fields=$1
    local format=$( control-error --output-format )
    local field_numbers=$( control-error --output-fields | csv-fields clear --except $fields | csv-fields )
    local output_format=$( echo $format | cut -d, -f$field_numbers )
    csv-bin-cut $format --fields=$field_numbers | csv-from-bin $output_format
}

fields="target/location/x,target/location/y,target/parameters/speed,error/cross_track,error/heading"
echo -e "1,0,0\n1,0.5,0.5\n1,1,0\n2,1.5,-0.5\n2,2,0" | csv-to-bin 3d > $feedback
output=( $( echo -e "1,10,1,0\n2,20,2,0" | csv-to-bin 4d | control-error "$feedback;fields=yaw,x,y;binary=3d" --fields=heading_offset,speed,x,y --binary=4d --verbose | extract $fields ) )

function echo_result
{
    local lhs=$1
    local result=$2
    local x y xtrack heading
    IFS=, read x y speed xtrack heading <<< $result
    echo "$lhs/x=$x"
    echo "$lhs/y=$y"
    echo "$lhs/speed=$speed"
    echo "$lhs/xtrack=$xtrack"
    echo "$lhs/heading=$heading"
}

echo_result "binary/output[0]" "${output[0]}"
echo_result "binary/output[1]" "${output[1]}"
echo_result "binary/output[2]" "${output[2]}"

clean
