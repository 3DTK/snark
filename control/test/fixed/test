#!/bin/bash

prefix=./output/
input=${prefix}objective
feedback=${prefix}feedback
output=${prefix}output
proximity=0.1

function clean
{
    pkill -P $$
    rm -f $input $feedback $output
    kill -9 $pid $feedback_pid &>/dev/null
    return 0
}
function bye { clean; exit 1; }
trap bye INT TERM HUP
trap clean EXIT

rm -f $feedback $input $output
mkfifo $feedback
mkfifo $input

function wait_for_success { local command=$1 timeout=1 n=100; local dt=$( bc -l <<< "$timeout/$n" ); for(( i=0; i < n; i++ )); do eval "$command" && return 0 || sleep $dt; done; return 1; }
function find_free_port { local port; for(( i=0; i < 100; i++ )); do port=$(( RANDOM + RANDOM )) && (( port > 1023 && port < 65536 )) && ! netstat -ln | grep $port &>/dev/null && echo $port && return; done; }
port=$( find_free_port )
if [[ -z "$port" ]]; then echo "failed to find a free tcp port" >&2; exit 1; fi

tail -f $feedback | socat -u - tcp-listen:$port,reuseaddr,fork & feedback_pid=$!
wait_for_success "netstat -ltn | grep $port &>/dev/null"
tail -f $input | control-error "tcp:localhost:$port;fields=t,x,y,,,,yaw" --proximity=$proximity --fields=x,y --past-endpoint --verbose > $output & pid=$!

function send_feedback
{
    local x y yaw
    IFS=, read x y yaw <<< $1
    echo 20121011T121314.123456,$x,$y,0,0,0,$yaw > $feedback
    sleep 0.1
}

output_line_count=0
function wait_for_new_output
{
    (( output_line_count++ ))
    wait_for_success "(( $( wc -l < $output ) == $output_line_count ))" && return 0
    echo "failed to get a new line in $output" >&2
    return 1
}

function test_feedback
{
    local lhs=$1
    local values=$2
    send_feedback $values
    wait_for_new_output || exit 1
    local output_fields="target/location/x,target/location/y,error/cross_track,error/heading"
    local x y xtrack heading
    IFS=, read x y xtrack heading <<< $( tail -n1 $output | csv-shuffle --fields=$( control-error --output-fields ) --output-fields=$output_fields)
    echo "$lhs/x=$x"
    echo "$lhs/y=$y"
    echo "$lhs/xtrack=$xtrack"
    echo "$lhs/heading=$heading"
}

function send_input { echo $1 > $input; sleep 0.1; }
function go_to { send_input $1; send_feedback $1,0; }

send_input 1,0
test_feedback "path/from_00_to_10/variable_xtrack/initial" 0,0,0
test_feedback "path/from_00_to_10/variable_xtrack/positive" 0,0.1,0
test_feedback "path/from_00_to_10/variable_xtrack/negative" 0,-0.1,0
test_feedback "path/from_00_to_10/variable_heading/positive" 0,0,0.1
test_feedback "path/from_00_to_10/variable_heading/negative" 0,0,-0.1
send_feedback 1,0,0

send_input 1,1
test_feedback "path/from_10_to_11/variable_xtrack/initial" 1,0,1.5707963267948966
test_feedback "path/from_10_to_11/variable_xtrack/positive" 0.9,0,1.5707963267948966
test_feedback "path/from_10_to_11/variable_xtrack/negative" 1.1,0,1.5707963267948966
test_feedback "path/from_10_to_11/variable_heading/positive" 1,0,1.6707963267948966
test_feedback "path/from_10_to_11/variable_heading/negative" 1,0,1.4707963267948966
send_feedback 1,1,1.57079632679

send_input 0,1
test_feedback "path/from_11_to_01/variable_xtrack/initial" 1,1,3.141592653589793
test_feedback "path/from_11_to_01/variable_xtrack/positive" 1,0.9,3.141592653589793
test_feedback "path/from_11_to_01/variable_xtrack/negative" 1,1.1,3.141592653589793
test_feedback "path/from_11_to_01/variable_heading/positive" 1,1,-3.041592653589793
test_feedback "path/from_11_to_01/variable_heading/negative" 1,1,3.041592653589793
send_feedback 0,1,-3.141592653589793

send_input 0,0
test_feedback "path/from_01_to_00/variable_xtrack/initial" 0,1,-1.5707963267948966
test_feedback "path/from_01_to_00/variable_xtrack/positive" 0.1,1,-1.5707963267948966
test_feedback "path/from_01_to_00/variable_xtrack/negative" -0.1,1,-1.5707963267948966
test_feedback "path/from_01_to_00/variable_heading/positive" 0,1,-1.4707963267948966
test_feedback "path/from_01_to_00/variable_heading/negative" 0,1,-1.6707963267948966
send_feedback 0,0,-1.5707963267948966

send_input 1,0
test_feedback "heading/from_00/to_10/zero" 0,0,0
test_feedback "heading/from_00/to_10/p1" 0,0,1
test_feedback "heading/from_00/to_10/p2" 0,0,2
test_feedback "heading/from_00/to_10/p3" 0,0,3
test_feedback "heading/from_00/to_10/m1" 0,0,-1
test_feedback "heading/from_00/to_10/m2" 0,0,-2
test_feedback "heading/from_00/to_10/m3" 0,0,-3
send_feedback 1,0,0

go_to 0,0
send_input 0,1
test_feedback "heading/from_00/to_01/zero" 0,0,0
test_feedback "heading/from_00/to_01/p1" 0,0,1
test_feedback "heading/from_00/to_01/p2" 0,0,2
test_feedback "heading/from_00/to_01/p3" 0,0,3
test_feedback "heading/from_00/to_01/m1" 0,0,-1
test_feedback "heading/from_00/to_01/m2" 0,0,-2
test_feedback "heading/from_00/to_01/m3" 0,0,-3
send_feedback 0,1,0

go_to 0,0
send_input -1,0
test_feedback "heading/from_00/to_m10/zero" 0,0,0
test_feedback "heading/from_00/to_m10/p1" 0,0,1
test_feedback "heading/from_00/to_m10/p2" 0,0,2
test_feedback "heading/from_00/to_m10/p3" 0,0,3
test_feedback "heading/from_00/to_m10/m1" 0,0,-1
test_feedback "heading/from_00/to_m10/m2" 0,0,-2
test_feedback "heading/from_00/to_m10/m3" 0,0,-3
send_feedback -1,0,0

go_to 0,0
send_input 0,-1
test_feedback "heading/from_00/to_0m1/zero" 0,0,0
test_feedback "heading/from_00/to_0m1/p1" 0,0,1
test_feedback "heading/from_00/to_0m1/p2" 0,0,2
test_feedback "heading/from_00/to_0m1/p3" 0,0,3
test_feedback "heading/from_00/to_0m1/m1" 0,0,-1
test_feedback "heading/from_00/to_0m1/m2" 0,0,-2
test_feedback "heading/from_00/to_0m1/m3" 0,0,-3
send_feedback 0,-1,0

go_to 1,1
send_input 3,2
test_feedback "xtrack/from_11_to_32/on_wayline" -1,0,0.46364760900080609
test_feedback "xtrack/from_11_to_32/left[0]" 0.5,2,0.46364760900080609
test_feedback "xtrack/from_11_to_32/left[1]" 1,2,0.46364760900080609
test_feedback "xtrack/from_11_to_32/right[0]" 1.5,0,0.46364760900080609
test_feedback "xtrack/from_11_to_32/right[1]" 2,0,0.46364760900080609
send_feedback 3,2,0

go_to 1,1
send_input 3,2
x=$( bc -l <<< "3+$proximity" )
y=$( bc -l <<< "2+$proximity/2" )
send_feedback $x,$y,0.46364760900080609
wait_for_new_output && reached=0 || reached=1
echo "past_endpoint/reached=$reached"

clean

