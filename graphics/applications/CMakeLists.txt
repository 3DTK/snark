SET( dir ${SOURCE_CODE_BASE_DIR}/graphics/applications )

SET( view_points view-points )
SET( label_points label-points )

set( build_view_points "TRUE" )
set( build_label_points "TRUE" )
set( build_test_pattern "TRUE" )

if( Qt3D_VERSION EQUAL 1 )
    set( build_test_pattern "FALSE" )
else()
    set( build_label_points "FALSE" )
endif()

# This gets rid of an annoying conflict between windows macros and std::numeric_limits::max and min
IF(WIN32)
  ADD_DEFINITIONS(-DNOMINMAX)
ENDIF(WIN32)

IF( QT_VERSION_MAJOR EQUAL 4 )
    SET( MOC_OPTIONS -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
ELSEIF( QT_VERSION_MAJOR EQUAL 5 )
    SET( MOC_OPTIONS -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
ENDIF( QT_VERSION_MAJOR EQUAL 4 )

if( build_label_points )
    list( APPEND snark_graphics_applications_install_targets ${label_points} )
    SET( LABEL_POINTS_MOC_FILES label_pointsMoc label_points/MainWindow.h label_points/Actions.h label_points/Viewer.h label_points/Tools.h label_points/IdEdit.h )

    IF( QT_VERSION_MAJOR EQUAL 4 )
        QT4_ADD_RESOURCES( resources label-points.qrc )
        QT4_WRAP_CPP( ${LABEL_POINTS_MOC_FILES} OPTIONS ${MOC_OPTIONS} )
    ELSEIF( QT_VERSION_MAJOR EQUAL 5 )
        QT5_ADD_RESOURCES( resources label-points.qrc )
        QT5_WRAP_CPP( ${LABEL_POINTS_MOC_FILES} OPTIONS ${MOC_OPTIONS} )
    ENDIF( QT_VERSION_MAJOR EQUAL 4 )

    SOURCE_GROUP( "label_pointsQtAutoGenerated" FILES ${label_pointsMoc} )
    FILE( GLOB source ${dir}/label_points/*.cpp ${dir}/view_points/vertex_buffer.cpp )
    FILE( GLOB include ${dir}/label_points/*.h)
    ADD_EXECUTABLE( ${label_points} label-points.cpp ${label_pointsMoc} ${resources} ${source} ${include} )
    SOURCE_GROUP( "label-points" FILES label-points.cpp ${source} ${include} )
    IF( QT_VERSION_MAJOR EQUAL 4 )
        TARGET_LINK_LIBRARIES( ${label_points} ${QT_LIBRARIES} snark_graphics_qt3d ${comma_ALL_LIBRARIES} ${Qt3D_LIB} ${OPENGL_LIBRARY} )
    ELSEIF( QT_VERSION_MAJOR EQUAL 5 )
        TARGET_LINK_LIBRARIES( ${label_points} snark_graphics_qt3d ${comma_ALL_LIBRARIES} )
    ENDIF( QT_VERSION_MAJOR EQUAL 4 )
endif()

if( build_view_points )
    if( Qt3D_VERSION EQUAL 1 )
        set( snark_qt3d_specific_dir "qt3d_v1" )
    elseif( Qt3D_VERSION EQUAL 2 )
        set( snark_qt3d_specific_dir "qt3d_v2" )
    else()
        message( FATAL_ERROR "Qt3D_VERSION is ${Qt3D_VERSION}, must be 1 or 2" )
    endif()

    list( APPEND snark_graphics_applications_install_targets ${view_points} )
    set( VIEW_POINTS_MOC_FILES view_pointsMoc view_points/main_window.h view_points/action.h )
    if( Qt3D_VERSION EQUAL 1 )
        list( APPEND VIEW_POINTS_MOC_FILES view_points/${snark_qt3d_specific_dir}/viewer.h )
    endif()

    if( QT_VERSION_MAJOR EQUAL 4 )
        QT4_WRAP_CPP( ${VIEW_POINTS_MOC_FILES} OPTIONS ${MOC_OPTIONS} )
    elseif( QT_VERSION_MAJOR EQUAL 5 )
        QT5_WRAP_CPP( ${VIEW_POINTS_MOC_FILES} OPTIONS ${MOC_OPTIONS} )
    endif( QT_VERSION_MAJOR EQUAL 4 )

    source_group( "view_pointsQtAutoGenerated" FILES ${view_pointsMoc} )
    file( GLOB source  ${dir}/view_points/*.cpp ${dir}/view_points/${snark_qt3d_specific_dir}/*.cpp )
    file( GLOB include ${dir}/view_points/*.h   ${dir}/view_points/${snark_qt3d_specific_dir}/*.h )

    source_group( "view_points" FILES view-points.cpp ${source} ${include} )
    add_executable( ${view_points} view-points.cpp ${source} ${include} ${view_pointsMoc} )

    if( QT_VERSION_MAJOR EQUAL 4 )
        target_link_libraries( ${view_points}
                               ${QT_LIBRARIES}
                               ${Qt3D_LIB}
                               snark_render
                               snark_graphics_qt3d
                               ${comma_ALL_LIBRARIES}
                               ${OPENGL_LIBRARY} )
    elseif( QT_VERSION_MAJOR EQUAL 5 )
        target_link_libraries( ${view_points}
                               Qt5::Widgets
                               snark_render
                               snark_graphics_qt3d
                               ${comma_ALL_LIBRARIES} )
    endif()
endif()

if( build_test_pattern )
    list( APPEND snark_graphics_applications_install_targets test-pattern )
    add_executable( test-pattern test-pattern.cpp )
    target_link_libraries( test-pattern Qt5::Gui ${comma_ALL_LIBRARIES} )
endif()

OPTION( snark_build_graphics_csv_plot "build csv-plot" OFF )

if( snark_build_graphics_csv_plot ) # todo: make sure it works for qt5
    
    # todo: quick and dirty, most likely won't work on windows; do it right, sometime
    find_path( QWT_INCLUDE_DIRS
                    NAMES qwt_plot.h
                    PATHS
                    /usr/local/include/qwt-qt4
                    /usr/local/include/qwt
                    /usr/include/qwt-qt4
                    /usr/include/qwt )
    find_library( QWT_LIBRARIES
                    NAMES qwt-qt4 qwt
                    PATHS /usr/local/lib /usr/lib )
    include ( FindPackageHandleStandardArgs )
    find_package_handle_standard_args( Qwt DEFAULT_MSG QWT_LIBRARIES QWT_INCLUDE_DIRS )
    MARK_AS_ADVANCED(QWT_LIBRARIES QWT_INCLUDE_DIRS)

    include_directories( ${QWT_INCLUDE_DIRS} )
    SET( CSV_PLOT_MOC_FILES csv_plot_moc csv_plot/plot.h ) #SET( CSV_PLOT_MOC_FILES csv_plot_Moc csv_plot/main_window.h csv_plot/plot.h )
    IF( QT_VERSION_MAJOR EQUAL 4 )
        QT4_WRAP_CPP( ${CSV_PLOT_MOC_FILES} OPTIONS ${MOC_OPTIONS} )
    ELSEIF( QT_VERSION_MAJOR EQUAL 5 )
        QT5_WRAP_CPP( ${CSV_PLOT_MOC_FILES} OPTIONS ${MOC_OPTIONS} )
    ENDIF( QT_VERSION_MAJOR EQUAL 4 )

    SOURCE_GROUP( "csv_plotQtAutoGenerated" FILES ${csv_plot_moc} )
    FILE( GLOB csv_plot_source ${dir}/csv_plot/*.cpp )
    FILE( GLOB csv_plot_include ${dir}/csv_plot/*.h )
    SOURCE_GROUP( csv-plot FILES csv-plot.cpp ${csv_plot_source} ${csv_plot_include} )
    ADD_EXECUTABLE( csv-plot csv-plot.cpp  ${csv_plot_source} ${csv_plot_include} ${csv_plot_moc} )

    IF( QT_VERSION_MAJOR EQUAL 4 )
        TARGET_LINK_LIBRARIES( csv-plot ${QT_LIBRARIES} ${comma_ALL_LIBRARIES} ${QWT_LIBRARIES} ${OPENGL_LIBRARY} ) #profiler )
    ELSEIF( QT_VERSION_MAJOR EQUAL 5 )
        TARGET_LINK_LIBRARIES( csv-plot ${comma_ALL_LIBRARIES} ${QWT_LIBRARIES} ) #profiler )
    ENDIF( QT_VERSION_MAJOR EQUAL 4 )
    
    INSTALL( TARGETS csv-plot RUNTIME DESTINATION ${snark_INSTALL_BIN_DIR} COMPONENT Runtime )
endif( snark_build_graphics_csv_plot )

INSTALL( TARGETS ${snark_graphics_applications_install_targets} RUNTIME DESTINATION ${snark_INSTALL_BIN_DIR} COMPONENT Runtime )
